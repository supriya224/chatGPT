{"ast":null,"code":"var _jsxFileName = \"/Users/admin/chatGPT/client/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"How can I help you today ?\"\n  }, {\n    user: \"me\",\n    message: \"I want to use chatgpt today\"\n  }]);\n  // clear chats\n  function clearchat() {\n    setChatLog([]);\n  }\n  async function handlesubmit(e) {\n    e.preventDefault();\n    setChatLog([...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }]);\n    setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: chatLog.map(message => message.message).join(\"\")\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLog, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    // console.log(data.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearchat,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), \"new chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handlesubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            className: \"chat-input-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Jhk/EbV0sYqPAHzc+b1aS6IGYr0=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user === \"gpt\" && \"chatgpt\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","input","setInput","chatLog","setChatLog","user","message","clearchat","handlesubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","map","join","data","json","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","index","ChatMessage","onSubmit","rows","value","onChange","target","_c","_ref","_c2","$RefreshReg$"],"sources":["/Users/admin/chatGPT/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"How can I help you today ?\",\n    },\n    {\n      user: \"me\",\n      message: \"I want to use chatgpt today\",\n    },\n  ]);\n      // clear chats\n      function clearchat(){\n        setChatLog([]);\n      } \n\n  async function handlesubmit(e) {\n    e.preventDefault();\n    setChatLog([...chatLog, { user: \"me\", message: `${input}` }]);\n    setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: chatLog.map((message) => message.message).join(\"\"),\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLog, { user: \"gpt\", message: `${data.message}` }]);\n    // console.log(data.message);\n  }\n  return (\n    <div className=\"App\">\n      <aside className=\"sidemenu\">\n        <div className=\"side-menu-button\" onClick={clearchat}>\n          <span>+</span>\n          new chat\n        </div>\n      </aside>\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n          {/* <div className=\"chat-message\">\n            <div className=\"chat-message-center\">\n              <div className=\"avatar\"></div>\n              <div className=\"message\">hello world</div>\n            </div>\n          </div> */}\n\n          {/* <div className=\"chat-message chatgpt\">\n            <div className=\"chat-message-center\">\n              <div className=\"avatar chatgpt\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\">\n                  <title>{\"Rectangle 5\"}</title>\n                  <path fill=\"#063855\" fillRule=\"evenodd\" d=\"M0 0h48v1H0z\" />\n                </svg>\n              </div>\n              <div className=\"message\">i am supriya maurya</div>\n            </div>\n          </div> */}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handlesubmit}>\n            <input\n              rows=\"1\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              className=\"chat-input-textarea\"\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n      <div className=\"chat-message-center\">\n        <div className={`avatar ${message.user === \"gpt\" && \"chatgpt\"}`}></div>\n        <div className=\"message\">{message.message}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}