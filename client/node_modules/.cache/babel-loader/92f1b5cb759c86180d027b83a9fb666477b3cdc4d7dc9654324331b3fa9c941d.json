{"ast":null,"code":"var _jsxFileName = \"/Users/admin/chatGPT/client/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    getEngines();\n  }, []);\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"ada\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"How can I help you today ?\"\n  }, {\n    user: \"me\",\n    message: \"I want to use chatgpt today\"\n  }]);\n  // clear chats\n  function clearChat() {\n    setChatLog([]);\n  }\n  function getEngines() {\n    fetch(\"http://localhost:3080/models\").then(res => res.json()).then(data => {\n      console.log(data.models.data);\n      setModels(data.models.data);\n    });\n  }\n  async function handlesubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }];\n    setChatLog(chatLogNew);\n    setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    // console.log(data.message);  \n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), \"New Chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            setCurrentModel(e.target.value);\n          },\n          children: models && (models === null || models === void 0 ? void 0 : models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: model.id,\n            children: model.id\n          }, model.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handlesubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            className: \"chat-input-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CEJil5+3fiSfr4FAZqZSoOSVBns=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user === \"gpt\" && \"chatgpt\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","App","_s","getEngines","input","setInput","models","setModels","currentModel","setCurrentModel","chatLog","setChatLog","user","message","clearChat","fetch","then","res","json","data","console","log","handlesubmit","e","preventDefault","chatLogNew","messages","map","join","response","method","headers","body","JSON","stringify","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","model","id","index","ChatMessage","onSubmit","rows","_c","_ref","_c2","$RefreshReg$"],"sources":["/Users/admin/chatGPT/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  useEffect(() => {\n    getEngines();\n  }, []);\n\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"ada\");\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"How can I help you today ?\",\n    },\n    {\n      user: \"me\",\n      message: \"I want to use chatgpt today\",\n    },\n  ]);\n  // clear chats\n  function clearChat() {\n    setChatLog([]);\n  }\n\n  function getEngines() {\n    fetch(\"http://localhost:3080/models\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data.models.data);\n        setModels(data.models.data);\n      });\n  }\n  async function handlesubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${input}` }];\n    setChatLog(chatLogNew);\n\n    setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port\n    const messages = chatLogNew.map((message) => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data.message}` }]);\n    // console.log(data.message);  \n  }\n  return (\n    <div className=\"App\">\n      <aside className=\"sidemenu\">\n        <div className=\"side-menu-button\" onClick={clearChat}>\n          <span>+</span>\n          New Chat\n        </div>\n        <div className=\"models\">\n          <select onChange={(e) => {setCurrentModel(e.target.value)}}>\n            {models && models?.map((model) => (\n              <option key={model.id} value={model.id}>\n                {model.id}\n              </option>\n            ))}\n          </select>\n        </div>\n      </aside>\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handlesubmit}>\n            <input\n              rows=\"1\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              className=\"chat-input-textarea\"\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nconst ChatMessage = ({ message }) => {\n  return (\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}>\n      <div className=\"chat-message-center\">\n        <div className={`avatar ${message.user === \"gpt\" && \"chatgpt\"}`}></div>\n        <div className=\"message\">{message.message}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}