{"ast":null,"code":"var _jsxFileName = \"/Users/admin/chatGPT/client/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"how can i help you today\"\n  }, {\n    user: \"me\",\n    message: \"I want to use chatgpt today\"\n  }]);\n  async function handlesubmit(e) {\n    e.preventDefault();\n    setChatLog([...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }]);\n    setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port \n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: chatLog.map(message => message.message).join(\"\")\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidemenu\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), \"new chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handlesubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            className: \"chat-input-textarea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"luhJR+r0Q3mETWOFiMeRIa/QxXo=\");\n_c = App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-message ${message.user === \"gpt\" && \"chatgpt\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user === \"gpt\" && \"chatgpt\"}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","input","setInput","chatLog","setChatLog","user","message","handlesubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","map","join","data","json","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","ChatMessage","onSubmit","rows","value","onChange","target","_c","_ref","_c2","$RefreshReg$"],"sources":["/Users/admin/chatGPT/client/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport \"./App.css\";\nimport \"../src/normal.css\";\nimport {useState} from 'react';\n\nfunction App() {\n\n  const [input, setInput] =useState(\"\");\n  const [chatLog,setChatLog]=useState([{\n    user:\"gpt\",\n    message:\"how can i help you today\" \n  },{\n    user:\"me\",\n    message:\"I want to use chatgpt today\"\n  }\n  ]);\n\n  async function handlesubmit(e){\n   e.preventDefault();\n   setChatLog([...chatLog, {user:\"me\" ,message:`${input}`}])\n   setInput(\"\");\n    //  fetch request to the api combiniing  the chat log array of messages and sendign it as  a messaage to localhost:3000 as a port \n    const response = await fetch(\"http://localhost:3080/\",{\n      method:\"POST\",\n      headers:{\n        \"Content-Type\":\"application/json\"\n      },\n      body:JSON.stringify({\n        message:chatLog.map((message)=>message.message).join(\"\")\n      })\n    });\n   const data= await response.json();\n   console.log(data);\n  }\n  return (\n    <div className=\"App\">\n      <aside className=\"sidemenu\">\n        <div className=\"side-menu-button\">\n          <span>+</span>\n          new chat\n        </div>\n      </aside>\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {\n            chatLog.map((message, index)=>(\n              <ChatMessage key={index} message ={message} />\n            ))\n          }\n          {/* <div className=\"chat-message\">\n            <div className=\"chat-message-center\">\n              <div className=\"avatar\"></div>\n              <div className=\"message\">hello world</div>\n            </div>\n          </div> */}\n\n          {/* <div className=\"chat-message chatgpt\">\n            <div className=\"chat-message-center\">\n              <div className=\"avatar chatgpt\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\">\n                  <title>{\"Rectangle 5\"}</title>\n                  <path fill=\"#063855\" fillRule=\"evenodd\" d=\"M0 0h48v1H0z\" />\n                </svg>\n              </div>\n              <div className=\"message\">i am supriya maurya</div>\n            </div>\n          </div> */}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handlesubmit}>\n          <input rows=\"1\" \n          value={input} \n          onChange = {(e) => setInput(e.target.value)} \n          className=\"chat-input-textarea\"></input></form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nconst ChatMessage =({message})=>{\n   return(\n    <div className={`chat-message ${message.user === \"gpt\" && \"chatgpt\"}`}> \n    <div className=\"chat-message-center\">\n      <div className={`avatar ${message.user === \"gpt\" && \"chatgpt\"}`}></div>\n      <div className=\"message\">{message.message}</div>\n    </div>\n  </div>\n   )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}